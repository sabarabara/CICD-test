dockerを使う理由

1.同一ディレクトリにデプロイできないということ
2.ライブラリバージョンによって動かなくなることがあるdev->本番用など

コンテナの特徴 隔離性、可搬性、機動性

隔離性-> システムA,システムBが同一のディレクトリ構造を持っていても衝突することがないということ。
可搬性-> そのまま別サーバにたいして簡単に動かすことができるということ
機動性-> コンテナはリソース単位で動くため簡単に動かすことができる、VMはゲストOS単位

コンテナ-> OpenVZ,Linux-VServerDockerなど


DockerEngin
--------
  Linux

  DockerEnginをダウンロードしたホストをDockerホストという

  Dockerコマンド->コマンド一つずつ
  Docker-compose->複数コンテナの起動

  Docker Registory...Dockerimageを管理している

Dokcerimageの種類

Linuxのみ
アプリケーション(DB,proxyserverなど)が入っている
カスタムOS

Docker運用
ECS EKSなど

デプロイ管理 Dockerレジストリからコンテナを取得しDockerエンジン上にデプロイする

障害時自動復旧コンテナダウンを検知して予め定めておいた起動コンテナ数を
下回った時に新しいコンテナを起動する

負荷分散　ユーザからのトラフィックを各コンテナに分散させる機能

ネットワーク制御　コンテナ間のネットワークを制御する機能
　コンテナABは通信OK しかしコンテナACはだめとか

CI/CD概要

システム統合時の不具合の多発、修正した負荷増大
モジュール間のIFの不整合など


リリース作業の流れ

アプリケーションを本番環境に持ち込む
既存アプリケーションの停止
新規アプリケーションのリリース(or きりかえ)
新規アプリケーションの稼働確認

これらにビジネス的価値はないが工数がとても多い


特徴


ソースコードのmerge 0
build 1
単体テスト 2
配布準備 3
デプロイ 4
統合テスト以降 5
リリース 6

開発環境 (0)1~5
ステージング環境3~5
本番環境 3~5(6)

()はむり

自動化できるのは一定の基準で判断できるもの
mergeはコンフリクトしたときにそれを自動的には直せないから
リリース(ユーザがアプリケーションにアクセスしてもいいかを判断する処理)これはむり

2の自動化によりシステム統合の迅速化による不具合検出
4の自動化により属人化排除,作業ミスの発生抑止


メリット、デメリット

システム統合の迅速化、不具合の早期検出
誰でも同じながれでデプロイを実施できる

CICDパイプラインのメンテナンスコストがかかる
誰がいつやるのかを明確化して修正したを周知する

テスト自動化のためのテストコード作成にコストがかかる
テストコードを特定のロジックのみに適応するようにし絞る



AWS Cloud9VPCはデフォでpubにあるのでpriにおいてふみだいを通してのアクセスが必須

Amazon ECS EKSもあるがオーケストレーションをおこなぅならこのどちらか

AWS Fargateコンテナむけのサーバレスコンピュートレスサービス,EC2より割高

Amazon ECR ECRコンテナリポジトリpriにおけるというのがセキュリティ的におすすめ


ECSの説明

タスク タスク内のコンテナは同一ホストで実行される
タスク定義 EC2の設定みたいなCPUやメモリをどの程度割り当てるか
サービス　ELBと連携してトラフィックを分散、オーケストレーション機能を提供しタスク数を定義
クラスター　サービスを管理するための概念

ECSの構成理解
改修のプロセスがことなりべつべつにデプロイしたい時など
たとえばnginxとphpでnginxの修正が大きい時など

同一ホストないで遅延なく通信させたいときは同一ホストでプログラムを作成
同一ホストなのでレイテンシがない

HANDSON-DOCKER///////////////////////////////////////////

AWS TOOLKITをあつかう

AWSのボタンを押して、EXploror->connectedwith...->AddNewConnection->accesskey,secret,usernameでログイン
左下にリージョンがでればあたり

Dockerfileとindex.htmlの作成
コマンド実行
docker build -t ctn-cicd-hdon .
docker run -d -p 8080:80 --name local-run ctn-cicd-hdon
-d ..background 
-p 8080というlinuxportと80というEXPOSEのportを合わせている

curl localhost:8080

docker exec -it local-run bash


docker build -t 727646465238.dkr.ecr.ap-northeast-1.amazonaws.com/ctn-cicd-hdon:0.0.1 .<-:以降はタグ
これを実行

imageのpush 
aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin 727646465238.dkr.ecr.ap-northeast-1.amazonaws.com
Login Succeeded

docker push 727646465238.dkr.ecr.ap-northeast-1.amazonaws.com/ctn-cicd-hdon:0.0.1


VPCの作成
name 
IPv4 CIDR
10.0.0.0/16

ECS クラスターの作成
　　タスクの作成　EC2と似たように自分でつくっていいよ
　　タスクをサービスに紐づける
　　サービスの作成　ALBをロードバランシングから紐づけてHTTP 80 <-default、VPC,sgの設定
    DNSにアクセス

    タスクの自動復旧
    タスクを停止すると10秒くらいで自動復旧される
    タスク数を増やすと自動的にスケールアウトされる
//////////////////////////////////////////////////




AWS CodeCommit 
  gitベースのリポジトリをセキュアにホストする。通信中などのファイルが暗号化される
AWS CodeBuild
  ソースコードをコンパイルコマンド、テスト、デプロイを自動的に行ってくれるフルマネージド
AWS CodeDeploy
  様々なサービスへのソフトウェアのデプロイを自動化するcodedeployでBlue/Greenデプロイを実現する。
  以前のデプロイに直ぐにロールバックできる
AWS CodePipline
  ワークフローを自動で実行することで高速な実行が可能
  CodeCommit->CodeBuild->CodeDeploy

  S3 CloudWatch->cloudWatchEventsを使う

  Blue/Greenデプロイメント
  普通のデプロイ アプリケーションを停止->変更->再開
  ...一定期間userがそのアプリケーションを使用できなくなる

  Blue/Greenデプロイメント ユーザの使用停止無しでできる
  すごいね

  Blue->既存の環境
  Green-> 新しい環境

  この処理が完了後ELBの向きの変更により環境の移行
  Blueはロールバックのために残しておく

  構成
  User->CodeCommit
  In->Dockerfile
      buildspec.yaml(どこにbuildしたものを格納するのか)
      appspec.yaml(どこにデプロイするのか)
      taskdef.json->Sourceアーティファクトに

  ステージング
  ソースステージ codecommitにデプロイしたものを格納する
  ビルドステージ　ビルド成果物をどこにデプロイするのか
  デプロイステージ どこにデプロイするのか


HANDSON/////////////////////////////////////////////////////////////////////////////

imageDetail.json->これはタスクが変更ごとに変化するからである
sgをHTTP(port80)とカスタムTCP(port8080)でさくせい
TCPはテスト
EC2のからELBへ
ALBの作成
まずALB subnet vpnをセット、ターゲットは仮のものを設定
その後リスナーとtgを削除する

serviceの作成

サービスの詳細設定
ネットワーキングにvpc,subnet,sgを紐づける

サービス検出に名前空間をつける

ロードバランシングの設定でALBを選択
既存のものから先ほどのalbを選択、リスナー、ターゲットグループを作成
ここではリスナーは上記の通りに8080のテストと80の本番環境でふたつ

Autoscalingの設定
task 2-2で最小、最大の設定
ポリシー名、を設定後ECSサービスメトリクスからECSServiceAverageCPUUtilization
tar 300
300
300

<-IAMのサービスロールがなくて積むのでしっかりやろう
やり方

ポリシー名
AmazonS3FullAccess
AWSCodeDeployRoleForECS

IAMで以下をロールに含んで作成

